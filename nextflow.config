// Configuration File
manifest {
    author = 'Phelelani Mpangase'
    homePage = 'https://github.com/phelelani/nf-rnaSeqCount'
    description = 'rnaSeqCount pipeline'
    mainScript = 'main.nf'
    version = '0.2'
}

// CHECK INPUTS AND OUTPUTS:
params {
    data       = null
    out        = null
    genome     = "/global/blast/reference_genomes/Mycobacterium_Tuberculosis_H37RV/genome.fasta"
    genes      = "/global/blast/reference_genomes/Mycobacterium_Tuberculosis_H37RV/genes.gtf"
    help       = null
    mode       = null
    from       = null
    pairedEnd  = null
    singleEnd  = null
    
    // WORKFLOW STEPS PARAMETERS
    trim       = null
    
    // RESOURCES
    max_memory = 200.GB
    max_cpus   = 24
    max_time   = 24.h
}

//  FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// CHECK INPUT AND OUTPUT PATHS
def checkPaths() {
    // CHECK DATA INPUT DIR
    if(params.data == null) {
        data_dir = new File("$PWD/")
    } else{
        data_dir = new File("${params.data}")
    }
    // CHECK DATA OUTPUT DIR
    if(params.out == null) {
        out_dir = new File("$PWD/results_nf-rnaSeqCount")
    } else{
        out_dir = new File("${params.out}")
    }
    // BIND GENOME AND GENES DIR
    genome_dir = new File("${params.genome}").getParent()
    genes_dir = new File("${params.genes}").getParent()
    bind_paths  = [data_dir, out_dir, genome_dir, genes_dir].unique().collect { it -> "-B ${it}"}.join(" ").toString()
    return [ bind_paths, out_dir ]
}

// SINGULARITY OPTIONS
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$PWD/containers"
        runOptions = "$bind_paths" + " --cleanenv"
        autoMounts = true
    }
}

// PIPELINE TRACING, VISUALIZATION AND HELP
def pipelineHelp() {
    if(params.help || params.mode == null) {
    } else if(params.mode in ['run.ReadQC','run.ReadTrimming','run.ReadAlignment','run.ReadCounting','run.MultiQC']) {
        trace {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqCount_${params.mode}_trace.txt"
        }
        timeline {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqCount_${params.mode}_timeline.html"
        }
        report {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqCount_${params.mode}_report.html"
        }
        dag {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqCount.dot"
        }
    } else{}
}

// ALL PROCESSESS SETTINGS
process {
    // ALL PROCESSES
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'

    // SPECIAL RESOURCE REQUIREMENTS
    withLabel: 'mini' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }   
    withLabel: 'midi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }        
    }   
    withLabel: 'maxi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }
    // CONTAINERS
    withName:run_GenerateSTARIndex {
        container = "$PWD/containers/nf-rnaSeqCount-star.sif"
    }
    withName:run_GenerateBowtie2Index {
        container = "$PWD/containers/nf-rnaSeqCount-trinity.sif"
    }
    withName:run_QualityChecks {
        container = "$PWD/containers/nf-rnaSeqCount-fastqc.sif"
    }
    withName:run_ReadTrimming {
        container = "$PWD/containers/nf-rnaSeqCount-trimmomatic.sif"
    }
    withName:run_STAR {
        container = "$PWD/containers/nf-rnaSeqCount-star.sif"
    }
    withName:run_HTSeqCount {
        container = "$PWD/containers/nf-rnaSeqCount-htseqcount.sif"
    }
    withName:run_FeatureCounts {
        container = "$PWD/containers/nf-rnaSeqCount-featurecounts.sif"
    }
    withName:run_MultiQC {
        container = "$PWD/containers/nf-rnaSeqCount-multiqc.sif"
    }
}

// PROFILES AND PROCESS OPTIONS
profiles {
    standard {
        executor = 'local'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
    slurm {
        executor = 'slurm'
        queue = 'batch'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
}
